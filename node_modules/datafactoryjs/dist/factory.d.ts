export declare class DataFactory {
    registeredTypes: Map<any, any>;
    register<T>(modelName: string | (T & Function), objectValues: () => T): void;
    create<T>(modelName: string | (T & Function), count?: number, modelExtensions?: object, extendModel?: boolean): T[];
    createSingle<T>(modelName: string | (T & Function), modelExtensions?: {
        [key: string]: T;
    }, extendModel?: boolean): T;
    instantiateObject<T>(modelName: string, modelExtensions: object | null): T;
    filterExtensionValues<T>(factoryModel: {
        [key: string]: T | null;
    }, modelExtensions: {
        [key: string]: T | null;
    }): object;
}
